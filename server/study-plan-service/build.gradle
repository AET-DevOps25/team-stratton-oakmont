import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

// Generate build information
def buildTimestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))
def gitCommit = 'git rev-parse --short HEAD'.execute().text.trim() ?: 'unknown'

// Process resources to substitute variables
processResources {
    // Only expand template variables in specific properties, not environment variables
    filesMatching('application.properties') {
        expand(
            version: project.version,
            buildTimestamp: buildTimestamp,
            gitCommit: gitCommit,
            // Provide placeholder values for environment variables that Spring will resolve at runtime
            DB_STUDY_PLAN_URL: '${DB_STUDY_PLAN_URL}',
            DB_STUDY_PLAN_USERNAME: '${DB_STUDY_PLAN_USERNAME}',
            DB_STUDY_PLAN_PASSWORD: '${DB_STUDY_PLAN_PASSWORD}',
            JWT_SECRET: '${JWT_SECRET}'
        )
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	//implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql'
	implementation 'me.paulschwarz:spring-dotenv:4.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    
    // for monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2'

    // JWT dependencies
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    implementation 'org.springframework.boot:spring-boot-starter-security'
}

test {
    // testLogging {
    //     events "passed", "skipped", "failed"
    //     showStandardStreams = true
    // }
	afterTest { desc, result ->
		println "Executed test: ${desc.name} [${result.resultType}]"
	}
}
