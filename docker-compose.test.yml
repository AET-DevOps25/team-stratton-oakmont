services:
  # Program Catalog Service
  program-catalog-service:
    build:
      context: ./server
      dockerfile: program-catalog-service/Dockerfile
    container_name: program-catalog-service
    ports:
      - "8080:8080"
      - "9080:9080" # Management port for Prometheus metrics
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    networks:
      - stratton-oakmont-network
    restart: unless-stopped

  # Study Plan Service
  study-plan-service:
    build:
      context: ./server
      dockerfile: study-plan-service/Dockerfile
    container_name: study-plan-service
    ports:
      - "8081:8081"
      - "9081:9081" # Management port for Prometheus metrics
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    networks:
      - stratton-oakmont-network
    restart: unless-stopped

  # AI Advisor Service
  ai-advisor-service:
    build:
      context: ./server
      dockerfile: ai-advisor-service/Dockerfile
    container_name: ai-advisor-service
    ports:
      - "8082:8082"
      - "9082:9082" # Management port for Prometheus metrics
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    networks:
      - stratton-oakmont-network
    restart: unless-stopped

  # User Auth Service
  user-auth-service:
    build:
      context: ./server
      dockerfile: user-auth-service/Dockerfile
    container_name: user-auth-service
    ports:
      - "8083:8083"
      - "9083:9083" # Management port for Prometheus metrics
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    env_file:
      - .env
    networks:
      - stratton-oakmont-network
    restart: unless-stopped

  # LLM Inference Service (Python)
  llm-inference-service:
    build:
      context: ./server/llm-inference-service
    container_name: llm-inference-service
    ports:
      - "8000:8000"
    environment:
      - ENV=development
    networks:
      - stratton-oakmont-network
    restart: unless-stopped

  # Client (React Frontend)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
      args:
        - NODE_ENV=development
        - VITE_MODE=development
        - VITE_API_BASE_URL=http://localhost:8083
    container_name: stratton-oakmont-client
    ports:
      - "3000:3000"
    depends_on:
      - program-catalog-service
      - study-plan-service
      - user-auth-service
      - ai-advisor-service
    networks:
      - stratton-oakmont-network
    restart: unless-stopped

  # Monitoring & Observability / Prometheus scrapes and stores metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - stratton-oakmont-network
    restart: unless-stopped

  # Monitoring & Observability / Promtail collects and ships logs to Loki
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    ports:
      - "9084:9080"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail/promtail.yml:/etc/promtail/promtail.yml
    command: -config.file=/etc/promtail/promtail.yml
    depends_on:
      - loki
    networks:
      - stratton-oakmont-network
    restart: unless-stopped

  # Monitoring & Observability / Loki for log aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/loki-config.yml:ro
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - stratton-oakmont-network
    restart: unless-stopped

  # Monitoring & Observability / Grafana for visualizing metrics from Prometheus and logs from Loki
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_FEATURE_TOGGLES_ENABLE=logsInExplore
      - GF_LOG_CONSOLECOLORS=true
    depends_on:
      - prometheus
      - loki
    networks:
      - stratton-oakmont-network
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana-storage:

networks:
  stratton-oakmont-network:
    driver: bridge
