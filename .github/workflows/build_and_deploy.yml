name: Build and Deploy

on:
  push:
  pull_request:
    branches: [main]

jobs:
  test:
    name: Run Java Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle
        run: cd server && ./gradlew build

  build:
    name: Build Docker Images
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [client, server]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Install Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr

      - name: Build and push Docker Image
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm64
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-k8s:
    name: Deploy to Kubernetes
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: "3.12.0"

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "1.28.0"

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Deploy to Kubernetes
        run: |
          helm upgrade --install team-stratton-oakmont ./helm/team-stratton-oakmont \
            --namespace team-stratton-oakmont \
            --create-namespace \
            --set frontend.image.repository=ghcr.io/${{ github.repository }}/client \
            --set frontend.image.tag=latest \
            --set backend.image.repository=ghcr.io/${{ github.repository }}/server \
            --set backend.image.tag=latest \
            --wait --timeout=300s

      - name: Verify Deployment
        run: |
          kubectl get pods -n team-stratton-oakmont
          kubectl get services -n team-stratton-oakmont
          kubectl get ingress -n team-stratton-oakmont

  deploy-aws:
    name: Deploy to AWS
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: aws-production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2 using Docker Compose
        run: |
          # Install SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Copy docker-compose to EC2 and deploy
          scp -o StrictHostKeyChecking=no docker-compose.yml ubuntu@${{ secrets.EC2_HOST }}:~/
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Update images and restart services
            docker-compose pull
            docker-compose up -d
            
            # Cleanup old images
            docker image prune -f
          EOF
