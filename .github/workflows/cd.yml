name: Continuous Deployment

on:
  workflow_dispatch: # Allows manual triggering of the workflow
  push: # Triggered by merge to main branch
    branches: [main]

env:
  REGISTRY: ghcr.io

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tag
        id: image_tag
        run: |
          # Get the PR number from the merge commit
          PR_NUMBER=$(git log -1 --pretty=format:"%s" | grep -o '#[0-9]*' | head -1 | tr -d '#')
          if [ -n "$PR_NUMBER" ]; then
          echo "tag=pr-$PR_NUMBER" >> $GITHUB_OUTPUT
          else
          echo "tag=main-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
          fi

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "latest"

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: "latest"

      - name: Configure kubectl
        shell: bash
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config

      - name: Deploy application with Helm
        run: |
          helm upgrade --install tum-study-planner ./helm/tum-study-planner \
            --namespace tum-study-planner --create-namespace \
            --set client.image.repository=${{ env.REGISTRY }}/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')/client \
            --set client.image.tag=latest \
            --set studyPlanService.image.repository=${{ env.REGISTRY }}/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')/study-plan-service \
            --set studyPlanService.image.tag=latest \
            --set userAuthService.image.repository=${{ env.REGISTRY }}/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')/user-auth-service \
            --set userAuthService.image.tag=latest \
            --set programCatalogService.image.repository=${{ env.REGISTRY }}/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')/program-catalog-service \
            --set programCatalogService.image.tag=latest \
            --set aiAdvisorService.image.repository=${{ env.REGISTRY }}/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')/ai-advisor-service \
            --set aiAdvisorService.image.tag=latest \
            --set llmInferenceService.image.repository=${{ env.REGISTRY }}/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')/llm-inference-service \
            --set llmInferenceService.image.tag=latest \
            --set swaggerUi.image.repository=${{ env.REGISTRY }}/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')/swagger-ui \
            --set swaggerUi.image.tag=latest \
            --wait --timeout=10m

      - name: Verify deployment
        run: |
          echo "üîç Checking deployment status..."
          kubectl get pods -n tum-study-planner

          echo ""
          echo "üìä Checking HPA (Auto-scaling)..."
          kubectl get hpa -n tum-study-planner

          echo ""
          echo "üõ°Ô∏è Checking Pod Disruption Budgets (Self-healing)..."
          kubectl get pdb -n tum-study-planner

          echo ""
          echo "üåê Checking Services..."
          kubectl get services -n tum-study-planner

          echo ""
          echo "üöÄ Checking Ingress..."
          kubectl get ingress -n tum-study-planner

          echo ""
          echo "‚úÖ Deployment completed successfully!"
          echo "üéØ Features enabled: HPA, Self-Healing, Auto-Scaling"
