curriculum_ID,transformed_link,ID,name,credits,version,valid,responsible,organisation,note,module_level,abbreviation,subtitle,duration,occurrence,language,related_programs,total_hours,contact_hours,self_study_hours,description_of_achievement_and_assessment_methods,exam_retake_next_semester,exam_retake_at_the_end_of_semester,prerequisites_recommended,intended_learning_outcomes,content,teaching_and_learning_methods,media,reading_list
2,https://campus.tum.de/tumonline/ee/ui/ca2/app/desktop/#/slc.cm.reg/student/modules/detail/458129/206?$ctx=lang=en&$scrollTo=toc_details,IN2109,Master's Thesis,30,-,Always,"Bichler, Martin",Academic Programs Informatik,-,Master,-,-,one semester,winter/summer semester,German/English,-,900,-,900,"The Master's Thesis is a research paper, which lasts for at most six month, during which students work on a specific and complex topic from information systems. They are able to formulate the scientific discourse and based on it develop and criticize a specific research question. The students have covered the topic with the expert knowledge and methodological skills acquired during their studies. This research elaboration is completed with a presentation of its content and results. The examination proves that participants are capable of analyzing and solving a demanding scientific problem in single person work and defend their results in front of third parties. The Master's Thesis is supervised by a professor of the Information Systems program from the faculty of Informatics at TUM. It should be between 50 and 100 pages.",Yes,No,"70 percent of the credits from required, required elective, and elective modules","After the elaboration of the master's thesis the graduates know how to rapidly and independently become acquainted with a subject area in the field of Information Systems. They have the ability, based on a specific problem, to analyze and evaluate all important aspects of those parts in Information Systems which are necessary for finding a solution. They can span, describe, and categorize the space of possible solutions, and choose a well-founded solution path according to given or elaborated criteria. They are able to develop a solution, and analyze and evaluate it precisely. Furthermore they know how to write a professional documentation and description of the developed solution.","Under guidance students familiarize themselves with an area in Information Systems. They are provided with a problem from this area that is still quite general, i.e. not yet specified. They have to investigate and evaluate different approaches to solve the problem, and decide for one path which is then to be executed. The accompanying elaboration summarizes the main aspects of the subject area, discusses the different ways to solve the problem, justifies the decision made, and describes the elaborated solution. Under guidance students familiarize themselves with an area in Information Systems. They are provided with a problem from this area that is still quite general, i.e. not yet specified. They have to investigate and evaluate different approaches to solve the problem, and decide for one path which is then to be executed. The accompanying elaboration summarizes the main aspects of the subject area, discusses the different ways to solve the problem, justifies the decision made, and describes the elaborated solution.","Students identify and analyze a specific problem from a branch of the field of Information Systems in supervised single person work. Consecutively they evaluate potential solution processes and then construct their own solution. This demands the study of the respective literature and the summary and complementation of existing scientific works. In regular meetings the students constructively criticize and productively implement changes to their own work together with their supervisor. Moreover, part of the Masther's Thesis might be the creation, implementation and evaluation of an own experiment or new case study. Here students particularly train their technical abilities. The contents and results of the research elaboration are summarized in an independently developed presentation and defended in front of third parties. Students also learn to work under time pressure.",PowerPoint and PC,Literature is provided by the supervising professor.
4,https://campus.tum.de/tumonline/ee/ui/ca2/app/desktop/#/slc.cm.reg/student/modules/detail/1060130/206?$ctx=lang=en&$scrollTo=toc_details,IN2309,Advanced Topics of Software Engineering,8,-,from Winter semester 2014/15,"Pretschner, Alexander",Department of Computer Science,-,Master,-,-,one semester,winter semester,German/English,-,240,90,150,"In the written exam (100 minutes) students should prove to be able to identify a given problem and find solutions within limited time. The examination will completely cover the content of the lectures. The answers will require own formulations. In addition, some modeling may be required.",No,Yes,Introduction to Software Engineering (IN0006),"At the end of the class, students understand the central goals and methods of requirements engineering. They know all relevant software quality attributes. They know how to elicit, specify and manage respective requirements; how they are reflected in architectures and, conversely, how architecture influences these attributes; how requirements, architectures and code can be assessed w.r.t. these attributes; and what the influence of the development process is. They can apply this knowledge in smaller projects in practice.","Developing large software systems necessitates tightly intertwining and synchronizing both the activities in the development process and the generated artifacts. Central success criteria include - Iterative elicitation and implementation of the requirements; - Architecture as the backbone of development; and - Mastering quality in its different facets. This class on Advanced Software Engineering demonstrates how requirements engineering, specification, architecture, detailed design, coding, software quality, and quality assurance interweave. Specifically, we discuss how non-functional requirements are reflected in the architecture; which tradeoffs exist with functional requirements as well as external and internal quality attributes; and how these requirements can be formulated and verified by tests. We will consider: 1. Requirements Engineering: Techniques for elicitation, analysis, prioritization, specification, validation of functional and non-functional requirements; anti-requirements. 2. Software Architecture: Principles, views&styles, architecture documentation, patterns, frameworks, reference architectures, product lines, analysis of an architecture s quality and of trade-offs. 3. Software Quality: Internal and external quality attributes, among others: maintainability, testability, understandability and performance, security, availability; software metrics 4. Quality Assurance: Assessment, prioritization, conflict resolution and reviews of requirements; assessments of architectures w.r.t. internal and external quality attributes; tests and reviews for functional and non-functional requirements in the code; fault models. 5. Influence of the development process. Developing large software systems necessitates tightly intertwining and synchronizing both the activities in the development process and the generated artifacts. Central success criteria include - Iterative elicitation and implementation of the requirements; - Architecture as the backbone of development; and - Mastering quality in its different facets. This class on Advanced Software Engineering demonstrates how requirements engineering, specification, architecture, detailed design, coding, software quality, and quality assurance interweave. Specifically, we discuss how non-functional requirements are reflected in the architecture; which tradeoffs exist with functional requirements as well as external and internal quality attributes; and how these requirements can be formulated and verified by tests. We will consider: 1. Requirements Engineering: Techniques for elicitation, analysis, prioritization, specification, validation of functional and non-functional requirements; anti-requirements. 2. Software Architecture: Principles, views&styles, architecture documentation, patterns, frameworks, reference architectures, product lines, analysis of an architecture s quality and of trade-offs. 3. Software Quality: Internal and external quality attributes, among others: maintainability, testability, understandability and performance, security, availability; software metrics 4. Quality Assurance: Assessment, prioritization, conflict resolution and reviews of requirements; assessments of architectures w.r.t. internal and external quality attributes; tests and reviews for functional and non-functional requirements in the code; fault models. 5. Influence of the development process.","This module comprises lectures and accompanying tutorials. The contents of the lectures will be taught by talks and presentations. Students will be encouraged to study literature and to get involved with the topics in depth. In the tutorials, concrete problems will be solved - partially in teamwork - and selected examples will be discussed.",Lecture with slides,"McConnell, Code Complete: A Practical Handbook of Software Construction, 2nd edition, Microsoft, 2004 Summerville, Software Engineering 9, Prentice Hall, 2010 Brooks, The Mythical Man Month, Addison-Wesley Longman, 1995 Rombach, Endres: A Handbook of Software and Systems Engineering, Addispn Wesley, 2003 Bass et al., Software Architecture in Practice, Addison Wesley, 3rd edition, Addison Wesley, 2012 Clements et al., Documenting Software Architectures, 2nd edition, Addison Wesley, 2010 Clements et al., Evaluating Software Architectures, Addison Wesley, 2001 Reussner, Hasselbring, Handbuch der Software-Architektur (in German), 2006 Jackson, Problem Frames, ACM Press, 2000 Sommerville, Sawyer: Requirements Engineering: A Good Practice Guide, John Wiley, 1997 Lamsweerde, Requirements Engineering: From System Goals to UML Models to Software Specifications, John Wiley, 2009 Goucher, Riley, Beautiful Testing, OReilly, 2009 Wagner, Software Product Quality Control, Springer, 2013 More references will be provided in class."
6,https://campus.tum.de/tumonline/ee/ui/ca2/app/desktop/#/slc.cm.reg/student/modules/detail/2839421/206?$ctx=lang=en&$scrollTo=toc_details,IN2105,Business Process Technologies and Management,5,v2,from Winter semester 2021/22,"Rinderle-Ma, Stefanie",Department of Computer Science,-,Master,-,-,one semester,summer semester,English,-,150,60,90,"The examination consists of a written 90 minutes exam. The exam shall ensure that students understand and can apply terminology, challenges, and concepts of business process technologies. To reflect the understanding as well as the practical application, the examination comprises a question-oriented and an application-oriented part. The latter is based on the topics addressed by the exercises such as process mining algorithms and modeling of process choreographies.",No,Yes,Bachelor IN0021 Introduction to Information Systems,"After successful completion of the module students are familiar with the different perspectives of business processes, i.e., control flow, data flow, and resources. Students can model these perspectives and implement them within a process-oriented application. The students understand how business process are monitored during runtime and how execution data (i.e., event-based data) is logged during process execution. Based on the logged process data, the students can apply basic process mining algorithms and interpret the results. Moreover, students are familiar with correctness and compliance notions for business processes. The students understand which and how side effects of changes and adaptations of running business process instances arise and can be controlled. Finally, students are able to model partner-spanning processes (so called process choreographies).",The course focuses on advanced aspects of business process management and business process technologies. Starting from the process-oriented development of applications the following topics are discussed: - Management of resources and work lists - Logging and monitoring of business process instances - Introduction to process mining - Business process compliance - Runtime adaptations of business process instances and business process evolution - Modeling and correctness aspects of process choreographies,"The teaching format features a lecture and a content-aligned tutorial. The lecturer present the content of the lecture. In addition, videos of the lecture content are provided on the website of the lecture. The videos serve as means to repeat and deepen the presented contents. Moreover, the videos can be used for in a flipped-classroom mode. The lecture content consists of the theoretical background of process-oriented technologies and business process management as well as their illustration based on practical examples from real-world applications and projects. The intention is to enable students to understand and assess process-oriented problems in a conceptual way as well as in an application context. The tutorial consists of deepening exercises on the theoretical parts of the lecture and of implementation exercises. The exercises are worked on in single person. The tutorial aims at enabling students in understanding and applying the concepts. Moreover, an overview on existing tools should be provided to students. Through the implementation exercises the students understand the paradigm of process-oriented application development and its application in practice.","Slides, videos, exercises, discussion","- M. Weske: Business Process Management - Concepts, Languages, Architectures, Third Edition. Springer 2019, ISBN 978-3-662-59431-5 - W. Grossmann, S. Rinderle-Ma: Fundamentals of Business Intelligence. Data-Centric Systems and Applications, Springer 2015, ISBN 978-3-662-46530-1 - M. Reichert, B. Weber: Enabling Flexibility in Process-Aware Information Systems - Challenges, Methods, Technologies. Springer 2012, ISBN 978-3-642-30408-8 - Wil M. P. van der Aalst: Process Mining - Data Science in Action, Second Edition. Springer 2016, ISBN 978-3-662-49850-7 - Zusätzlich wird am Ende jeder Vorlesung relevante Literatur zur Verfügung gestellt."
7,https://campus.tum.de/tumonline/ee/ui/ca2/app/desktop/#/slc.cm.reg/student/modules/detail/1452141/206?$ctx=lang=en&$scrollTo=toc_details,IN2087,Software Engineering for Business Applications - Master's Course: Web Application Engineering,8,2,Always,"Matthes, Florian",Department of Computer Science,-,Master,-,-,one semester,summer semester,English,-,240,60,180,"Type of Assessment: project work The student's performance is assessed based on several deliverables and their presentations in the context of a project work assignment including three milestones. 1. At first, students develop an online-based business idea and further develop it into a business model. Hereby, an appropriate project planning and task distribution must be carried out and justified. In addition, the students structure and evaluate their business idea using methods like the Business Model Canvas and the Value Proposition Canvas. Finally, the results are presented. (10%) 2. Once the business model has been developed, four concrete use cases are derived. In addition, appropriate patterns for the design of the web application must be selected and applied in concrete mockups. The technical architecture should be documented using UML diagrams. The results are presented. (15%) 3. Based on the mockups and the technical concepts, the students develop a prototype of the web application including all defined use cases. Modern web frameworks as discussed in the lecture are integrated into the application, encompassing both frontend and backend aspects. The final assessment includes the development of the final prototype and the presentation of the results. In addition, the students have to answer questions regarding their web application and the underlying theoretical concepts. The students must ensure good teamwork and team communication. (75%) Workload: The development of a modern web application represents the biggest effort in this module. Hereby, the students have to acquire the necessary knowledge to accomplish this task. Learning progress is supported through tutorials and feedback appointments with mentors. Additional workload arises from the preparation of the submissions and presentations.",No,No,"Knowledge and skills at the bachelor s level (Informatics/Business Informatics) in software engineering, programming and databases","Upon completion of this module, students are able to design, plan and implement state-of-the-art web applications independently. They are skilled in identifying, explaining and developing business models for the web, selecting and applying patterns for web application design. Furthermore, students are able to explain a user-centered, iterative development process and apply it in a collaborative environment. Students are able to explain and select state-of-the-art technologies for the implementation of web applications. This encompasses both client- and server-side aspects. Upon completion of the module, students are able to explain web based integration techniques and present a web development project and it's result to an audience","1. Web Site Genres -- Business Models on the Web -- Web 2.0 and Social Software -- Anything as a Service (XaaS) 2. Web Site Design -- Key Issues of Customer-Centered Web Design -- An Overview of Web Design Patterns -- Knowing Your Customers -- Involving Customers with Iterative Design -- Processes for Developing Customer-Centered Sites -- Additional Viewpoints and Aspects 3. Patterns for Web Site Design -- Explaining Your Value Proposition -- Creating a Navigation Framework -- Basic and Advanced E-Commerce -- Designing Effective Page Layouts -- Making Site Search Fast and Effective -- Making Navigation Easy -- Speeding Up Web Sites -- Supporting a Wide Range of Devices (Responsive Design) -- Integrating Multiple Touchpoints (Mobile Apps, Progressive Web Apps, and Hybrid Apps) -- Integrating Independently Developed Web Services, Content, and Processes 4. Fundamental Concepts of Single-Page Web Applications -- HTML Concepts and their Evolution -- CSS Concepts and their Link to HTML -- JavaScript Basics -- SVG and Canvas -- Web Components -- Single-Page Applications -- Component-based Frameworks 5. Developing Single-Page Applications with a Specific Web Application Framework -- Web Application Framework Comparison -- Basic Concepts of the Chosen Framework -- State Management -- Navigation & Routing -- Client-Server Communication -- Consuming RESTful Service 6. Building REST-Enabled Back-End Service -- Target Architecture and Development Environment -- Event-Driven Architecture and Asynchronous I/O Operations -- Creating REST Interfaces -- Using Document-Oriented Database Storage -- Enabling User Authentication on the Web Service 7. Advanced Topics in Web Application Engineering -- Real-Time Web Applications -- Virtual DOM -- Hybrid Web Applications -- Other Web Frameworks -- Traditional Web Stacks, Server-Side Rendering 8. High Performance Web Applications -- Database Options for Web Applications -- Scaling Web Applications 1. Web Site Genres -- Business Models on the Web -- Web 2.0 and Social Software -- Anything as a Service (XaaS) 2. Web Site Design -- Key Issues of Customer-Centered Web Design -- An Overview of Web Design Patterns -- Knowing Your Customers -- Involving Customers with Iterative Design -- Processes for Developing Customer-Centered Sites -- Additional Viewpoints and Aspects 3. Patterns for Web Site Design -- Explaining Your Value Proposition -- Creating a Navigation Framework -- Basic and Advanced E-Commerce -- Designing Effective Page Layouts -- Making Site Search Fast and Effective -- Making Navigation Easy -- Speeding Up Web Sites -- Supporting a Wide Range of Devices (Responsive Design) -- Integrating Multiple Touchpoints (Mobile Apps, Progressive Web Apps, and Hybrid Apps) -- Integrating Independently Developed Web Services, Content, and Processes 4. Fundamental Concepts of Single-Page Web Applications -- HTML Concepts and their Evolution -- CSS Concepts and their Link to HTML -- JavaScript Basics -- SVG and Canvas -- Web Components -- Single-Page Applications -- Component-based Frameworks 5. Developing Single-Page Applications with a Specific Web Application Framework -- Web Application Framework Comparison -- Basic Concepts of the Chosen Framework -- State Management -- Navigation & Routing -- Client-Server Communication -- Consuming RESTful Service 6. Building REST-Enabled Back-End Service -- Target Architecture and Development Environment -- Event-Driven Architecture and Asynchronous I/O Operations -- Creating REST Interfaces -- Using Document-Oriented Database Storage -- Enabling User Authentication on the Web Service 7. Advanced Topics in Web Application Engineering -- Real-Time Web Applications -- Virtual DOM -- Hybrid Web Applications -- Other Web Frameworks -- Traditional Web Stacks, Server-Side Rendering 8. High Performance Web Applications -- Database Options for Web Applications -- Scaling Web Applications","Lecture (with embedded tutorials), supervised project work in small groups (max. 4 members) and presentation of the project results.",Lecture with digital slides and system demonstration,"- Axel Rauschmayer: Exploring ES6, Ecmanauten, http://exploringjs.com/es6/ - Axel Rauschmayer: Setting Up ES6, Ecmanauten, https://leanpub.com/setting-up-es6/ - Alexander Osterwalder, Yves Pigneur: Business model generation: A Handbook for Visionaries, Game Changes, and Challenges, John Wiley & Sons 2010 - D. Roam: The Back of the Napkin: Solving Problems and Selling Ideas with Pictures, Portfolio Hardcover, 2012 - Steve Krug: Don't make me think! Web Usability: Das intuitive Web, New Riders Press; 2 edition, 2005 - Robert Hoekman: Designing the Obvious. A Commonsense Approach to Web Application Design, New Riders Press; 1 edition, 2006 - David Flanagan: JavaScript: The Definitive Guide, O'Reilly Media, 2011 - Doublas Crockford :JavaScript, http://javascript.crockford.com/ - React Official Tutorial, ReactJS.org, https://reactjs.org/tutorial/tutorial.html - Eve Porcello : React.js Essential Training, Lynda.com, 2017, https://www.lynda.com/React-js-tutorials/React-js-Essential-Training/496905-2.html (kostenloser Zugang for TUM Studenten) - Express - Web Framework for Node.js, http://expressjs.com/ - Cal Henderson: Building Scalable Web Sites, O´Reilly; 2006 - Eric Vliest, Danny Ayers, Erik Bruchez, Joe Fawcett, Alessandro Vernet: Web 2.0 Programming, Wiley Publishing, 2007"
