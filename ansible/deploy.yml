---
- name: Deploy TUM Study Planner Application
  hosts: webservers
  become: yes
  vars:
    app_dir: /opt/tum-study-planner
    repo_url: https://github.com/AET-DevOps25/team-stratton-oakmont.git

  tasks:
    - name: Install required packages and setup Docker
      block:
        - name: Clean package cache
          command: yum clean all
          ignore_errors: yes

        - name: Install packages
          yum:
            name:
              - git
              - docker
            state: present
            update_cache: yes

    - name: Download and install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-linux-x86_64"
        dest: /usr/local/bin/docker-compose
        mode: "0755"
        owner: root
        group: root

    - name: Create docker-compose symlink
      file:
        src: /usr/local/bin/docker-compose
        dest: /usr/bin/docker-compose
        state: link

    - name: Start and enable Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Reset SSH connection to allow user group changes
      meta: reset_connection

    - name: Test Docker access for ec2-user
      command: docker --version
      become_user: ec2-user
      register: docker_test
      failed_when: docker_test.rc != 0

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: ec2-user
        group: ec2-user
        mode: "0755"

    - name: Clone application repository
      git:
        repo: "{{ repo_url }}"
        # TODO: change to main
        dest: "{{ app_dir }}"
        version: "fix/study-plans"
        force: yes
      become_user: ec2-user

    - name: Get public IP address
      uri:
        url: http://checkip.amazonaws.com/
        return_content: yes
      register: public_ip_result

    - name: Set public IP fact
      set_fact:
        public_ip: "{{ public_ip_result.content | trim }}"

    - name: Debug public IP
      debug:
        msg: "Detected public IP: {{ public_ip }}"

    - name: Copy local environment file
      copy:
        src: "{{ playbook_dir }}/../.env" # This looks for .env in project root
        dest: "{{ app_dir }}/.env"
        owner: ec2-user
        group: ec2-user
        mode: "0600"

    - name: Add AWS-specific environment variables for Gemini API
      lineinfile:
        path: "{{ app_dir }}/.env"
        line: "{{ item }}"
        create: yes
        owner: ec2-user
        group: ec2-user
        mode: "0600"
      loop:
        - "USE_GEMINI=true"
        - "OPENAI_BASE_URL=https://api.openai.com/v1"
        - "OLLAMA_BASE_URL=https://api.openai.com/v1"

    - name: Check if Weaviate export exists locally
      local_action:
        module: stat
        path: "{{ playbook_dir }}/../scripts/weaviate-export"
      register: local_weaviate_export
      become: no

    - name: Copy Weaviate export data if exists
      copy:
        src: "{{ playbook_dir }}/../scripts/weaviate-export/"
        dest: "{{ app_dir }}/weaviate-export/"
        owner: ec2-user
        group: ec2-user
        mode: "0644"
      when: local_weaviate_export.stat.exists

    - name: Copy Weaviate import scripts
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: ec2-user
        group: ec2-user
        mode: "{{ item.mode }}"
      loop:
        - {
            src: "{{ playbook_dir }}/../scripts/import-weaviate-data.sh",
            dest: "{{ app_dir }}/import-weaviate-data.sh",
            mode: "0755",
          }
        - {
            src: "{{ playbook_dir }}/../scripts/import-weaviate-data.py",
            dest: "{{ app_dir }}/import-weaviate-data.py",
            mode: "0755",
          }

    - name: Stop existing containers
      command: docker-compose -f docker-compose.prod.yml -f docker-compose.ai.yml down --remove-orphans
      args:
        chdir: "{{ app_dir }}"
      ignore_errors: yes

    - name: Start application with Docker Compose (with AI services)
      command: docker-compose -f docker-compose.prod.yml -f docker-compose.ai.yml up -d --build --force-recreate
      args:
        chdir: "{{ app_dir }}"
      register: compose_result

    - name: Show Docker Compose output
      debug:
        var: compose_result

    - name: Wait for services to be ready
      wait_for:
        port: "{{ item }}"
        delay: 10
        timeout: 300
      loop:
        - 80 # client
        - 8000 # weaviate
        - 8080 # program-catalog-service
        - 8081 # study-plan-service
        - 8082 # ai-advisor-service
        - 8083 # user-auth-service
        - 8084 # llm-inference-service

    - name: Populate Weaviate with course data
      shell: |
        cd {{ app_dir }}
        if [ -f "./import-weaviate-data.py" ] && [ -d "./weaviate-export" ]; then
          echo "üöÄ Importing Weaviate data with Python script..."
          python3 ./import-weaviate-data.py
        elif [ -f "./import-weaviate-data.sh" ] && [ -d "./weaviate-export" ]; then
          echo "üöÄ Importing Weaviate data with bash script..."
          ./import-weaviate-data.sh
        else
          echo "‚ö†Ô∏è  Weaviate export data not found, skipping import"
        fi
      become_user: ec2-user
      register: weaviate_import_result

    - name: Show Weaviate import result
      debug:
        var: weaviate_import_result.stdout_lines
