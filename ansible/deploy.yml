---
- name: Deploy TUM Study Planner Application
  hosts: webservers
  become: yes
  vars:
    app_dir: /opt/tum-study-planner
    repo_url: https://github.com/AET-DevOps25/team-stratton-oakmont.git

  tasks:
    - name: Ensure git is installed
      yum:
        name: git
        state: present

    - name: Install Docker if not present
      yum:
        name: docker
        state: present

    - name: Ensure Docker is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Reset SSH connection to allow user group changes
      meta: reset_connection

    - name: Test Docker access for ec2-user
      command: docker --version
      become_user: ec2-user
      register: docker_test
      failed_when: docker_test.rc != 0

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: ec2-user
        group: ec2-user
        mode: "0755"

    - name: Clone application repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ app_dir }}"
        # TODO: change to main
        version: "79-set-up-terraform-and-ansible-scripts-in-the-team-repository-to-automate-creating-an-ec2-instance-and-deplying-our-app-on-it"
        force: yes
      become_user: ec2-user

    - name: Get public IP address
      uri:
        url: http://checkip.amazonaws.com/
        return_content: yes
      register: public_ip_result

    - name: Set public IP fact
      set_fact:
        public_ip: "{{ public_ip_result.content | trim }}"

    - name: Debug public IP
      debug:
        msg: "Detected public IP: {{ public_ip }}"

    - name: Copy production docker-compose from repository
      copy:
        src: "{{ app_dir }}/docker-compose.prod.yml"
        dest: "{{ app_dir }}/docker-compose.temp.yml"
        remote_src: yes
        owner: ec2-user
        group: ec2-user

    - name: Replace placeholder IP with actual IP
      replace:
        path: "{{ app_dir }}/docker-compose.temp.yml"
        regexp: "PLACEHOLDER_IP"
        replace: "{{ public_ip }}"

    - name: Copy updated docker-compose as main file
      copy:
        src: "{{ app_dir }}/docker-compose.temp.yml"
        dest: "{{ app_dir }}/docker-compose.yml"
        remote_src: yes
        owner: ec2-user
        group: ec2-user

    - name: Remove temporary file
      file:
        path: "{{ app_dir }}/docker-compose.temp.yml"
        state: absent

    - name: Copy local environment file
      copy:
        src: "{{ playbook_dir }}/../.env" # This looks for .env in project root
        dest: "{{ app_dir }}/.env"
        owner: ec2-user
        group: ec2-user
        mode: "0600"

    - name: Pull Docker images first (with timeout)
      command: docker-compose pull
      args:
        chdir: "{{ app_dir }}"
      become_user: ec2-user
      async: 600 # 10 minutes timeout
      poll: 30 # Check every 30 seconds
      register: pull_result

    - name: Build Docker images (if needed)
      command: docker-compose build --no-cache
      args:
        chdir: "{{ app_dir }}"
      become_user: ec2-user
      async: 900 # 15 minutes for building
      poll: 60 # Check every minute
      register: build_result
      when: pull_result is failed or pull_result.rc != 0

    - name: Start application services (with timeout)
      command: docker-compose up -d
      args:
        chdir: "{{ app_dir }}"
      become_user: ec2-user
      async: 300
      poll: 15
      register: compose_result

    - name: Show Docker Compose output
      debug:
        var: compose_result

    - name: Wait for services to be ready
      wait_for:
        port: "{{ item }}"
        delay: 10
        timeout: 300
      loop:
        - 80
        - 8080
        - 8081
        - 8082
        - 8083
