---
- name: Deploy TUM Study Planner Application
  hosts: webservers
  become: yes
  vars:
    app_dir: /opt/tum-study-planner
    repo_url: https://github.com/AET-DevOps25/team-stratton-oakmont.git

  tasks:
    - name: Install required packages and setup Docker
      block:
        - name: Install packages
          yum:
            name:
              - git
              - docker
            state: present

    - name: Download and install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-linux-x86_64"
        dest: /usr/local/bin/docker-compose
        mode: "0755"
        owner: root
        group: root

    - name: Create docker-compose symlink
      file:
        src: /usr/local/bin/docker-compose
        dest: /usr/bin/docker-compose
        state: link

    - name: Start and enable Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Reset SSH connection to allow user group changes
      meta: reset_connection

    - name: Test Docker access for ec2-user
      command: docker --version
      become_user: ec2-user
      register: docker_test
      failed_when: docker_test.rc != 0

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: ec2-user
        group: ec2-user
        mode: "0755"

    - name: Clone application repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ app_dir }}"
        # TODO: change to main
        version: "79-set-up-terraform-and-ansible-scripts-in-the-team-repository-to-automate-creating-an-ec2-instance-and-deplying-our-app-on-it"
        force: yes
      become_user: ec2-user

    - name: Get public IP address
      uri:
        url: http://checkip.amazonaws.com/
        return_content: yes
      register: public_ip_result

    - name: Set public IP fact
      set_fact:
        public_ip: "{{ public_ip_result.content | trim }}"

    - name: Debug public IP
      debug:
        msg: "Detected public IP: {{ public_ip }}"

    - name: Copy local environment file
      copy:
        src: "{{ playbook_dir }}/../.env" # This looks for .env in project root
        dest: "{{ app_dir }}/.env"
        owner: ec2-user
        group: ec2-user
        mode: "0600"

    - name: Stop any existing containers
      command: docker-compose -f docker-compose.prod.yml down --remove-orphans
      args:
        chdir: "{{ app_dir }}"
      become_user: ec2-user
      ignore_errors: yes

    - name: Start application services with PUBLIC_IP environment variable
      command: docker-compose -f docker-compose.prod.yml up -d --build --force-recreate
      args:
        chdir: "{{ app_dir }}"
      become_user: ec2-user
      environment:
        PUBLIC_IP: "http://{{ public_ip }}"
      async: 500
      poll: 30
      register: compose_result

    # - name: Pull Docker images first (with timeout)
    #   command: docker-compose pull
    #   args:
    #     chdir: "{{ app_dir }}"
    #   become_user: ec2-user
    #   async: 600 # 10 minutes timeout
    #   poll: 30 # Check every 30 seconds
    #   register: pull_result

    # - name: Build Docker images (if needed)
    #   command: docker-compose build --no-cache
    #   args:
    #     chdir: "{{ app_dir }}"
    #   become_user: ec2-user
    #   async: 900 # 15 minutes for building
    #   poll: 60 # Check every minute
    #   register: build_result
    #   when: pull_result is failed or pull_result.rc != 0

    # - name: Start application services (with timeout)
    #   command: docker-compose up -d
    #   args:
    #     chdir: "{{ app_dir }}"
    #   become_user: ec2-user
    #   async: 300
    #   poll: 15
    #   register: compose_result

    - name: Show Docker Compose output
      debug:
        var: compose_result

    - name: Wait for services to be ready
      wait_for:
        port: "{{ item }}"
        delay: 10
        timeout: 300
      loop:
        - 80
        - 8080
        - 8081
        - 8082
        - 8083
        - 8000
